//Code Flow 
//
//Off -> High -> Mid -> Low -> Flashing -> Off
//
//MAKE LOOP() just FUNCTIONS, Better flow
//

#define ledPin 13  // LED digital pin
#define buttonPin 3  // Button Pin
#define maxLED 255 // MAX LED level

int count = 0; // Store mode number
bool button = false // Button press
int ledState = LOW;

unsigned long previousMillis = 0; // store last time LED updated
unsigned long interval = 1000;  //interval at which to blink (milliseconds)
const long freq = 2; // Frequency in Hz
unsigned long currentMillies = 0; // Running time

void setup(){
  pinmode(ledPin, OUTPUT)
  pinmode(buttonPin, INPUT)
  digitalwrite(buttonPin, Low) // don't draw power 
  attachInterrupt(digitalPinToInterrupt(interruptPin), blink, FALLING)
  interval = 1000/freq;
  
}

void loop()
{
  currentMillies = millis(); //Keep track of running time
  checkbuttonpress(); // Check if button press 
  
  light_on() ;    //Change LED state
}

void checkbuttonpress()
{
 if interrput (button press) 
  {
  count = count +1;   \\ Change mode only when pressed
  if count>1000
  count= 0;         \\ Limit on data size of int
  button = false
}


void blink() 
{
  state = !state;
}

void light_on()
{
  // Function based on mode(count); CHANGE TO CASE STATEMENTS
  switch(count % 5) {
    case 0:
      analogWrite(ledPin, 0); // OFF
      break;
    
    case 1:
      analogWrite(ledPin, int(maxLED)); // High Mode
      break;
      
    case 2:
      analogWrite(ledPin, int(maxLED/2)); // Mid Mode
      break:
      
    case 3:  
      analogWrite(ledPin, int(maxLED/4)); // Low Mode
      break;
      
    case 4: 
      blinkLED();
      break;
}
    
void blinkLED()
{
    // Blinking at 2Hz
    if (currentMillis - previousMillis >= interval) 
    {
      previousMillis = currentMillis; // save the last time you blinked the LED
    
      if (ledState == LOW)
      {
        ledState = HIGH;
        analogWrite(ledPin, 200); // On 
      } 
      else 
      {
        ledState = LOW;
        analogWrite(ledPin, 0); // OFF
      }
    }
}
